module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = function(d) { return d; },
        peg$c2 = null,
        peg$c3 = function(s, a, se) {
                                        var ret = {}

                                        ret.service = s;
                                        ret.annotations = a ? a[1] : null;
                                        ret.settings    = se ? se[1] : null;
                                        return ret;
                                   },
        peg$c4 = "service",
        peg$c5 = { type: "literal", value: "service", description: "\"service\"" },
        peg$c6 = function(n, b) {
                                        var ret =  { };
                                        if (n) {
                                            ret.namespace = n[1];
                                        };
                                        if (b.entityTypes) {
                                            ret.entityTypes = b.entityTypes
                                        }
                                        if (b.associations) {
                                            ret.associations = b.associations
                                        }

                                        if (b.additionalExits) {
                                            ret.additionalExits = b.additionalExits
                                        }
                                        return ret;
                                   },
        peg$c7 = "namespace",
        peg$c8 = { type: "literal", value: "namespace", description: "\"namespace\"" },
        peg$c9 = function(q) { return q; },
        peg$c10 = "{",
        peg$c11 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c12 = ";",
        peg$c13 = { type: "literal", value: ";", description: "\";\"" },
        peg$c14 = "}",
        peg$c15 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c16 = function(e, m) {
                                      return e;
                                     if (m) {
                                        e.metadata = m[1];
                                     }
                                   },
        peg$c17 = [],
        peg$c18 = function(e) {
                                      var ret = {};
                                      ret.associations = {};
                                      ret.entityTypes = {};
                                      ret.additionalExits = {};
                                      for (var i = 0; i < e.length; i++) {
                                          if (e[i][0+1].isAssociation === true) {
                                              delete e[i][0+1].isAssociation;
                                              ret.associations[e[i][0+1].name] = e[i][0+1];
                                          } else if (e[i][0+1].isMetadataExit === true) {
                                              delete e[i][0+1].isMetadataExit;
                                              ret.additionalExits.metadata = e[i][0+1];
                                          } else {
                                              ret.entityTypes[e[i][0+1].name] = (e[i][0+1]);
                                          }
                                      }
                                      return ret;
                                   },
        peg$c19 = "metadata using",
        peg$c20 = { type: "literal", value: "metadata using", description: "\"metadata using\"" },
        peg$c21 = function(q) {
                                       return {
                                           'isMetadataExit' :  true,
                                           'using' : q
                                       };
                                   },
        peg$c22 = function(e) {   return e;  },
        peg$c23 = function(o, es, w, k, ct, rt, n, ge, a, p, m) {
                                        var ret =  {};
                                        var atv = '.attributeview';
                                        if (utils.endsWith(o.name,atv)){
                                            ret.table = o.name.substring(0,o.name.length-atv.length);
                                            ret.isAttributeView = true;
                                        } else {
                                            ret.table = o.name;
                                            ret.isAttributeView = false;
                                        }
                                        if (o.isExplicitEntity) {
                                            ret.isExplicitEntity = o.isExplicitEntity;
                                        }

                                        ret.schema = o.schema;

                                        if (es) {
                                            ret.name = es[1];
                                        } else {
                                            var i = ret.table.indexOf('::');
                                            if (i > -1) {
                                                ret.name = ret.table.substr(i+2);
                                            } else {
                                                ret.name = ret.table;
                                            }
                                        }



                                        if (k) {
                                            if (k[1].isGenerated === true) {
                                                delete (k[1].isGenerated);
                                                ret['keys_generated'] = k[1];
                                            } else {
                                                ret.keys = k[1];
                                            }
                                        } else {
                                            ret.keys = null;
                                        }

                                        //properties
                                        ret.properties = {};
                                        if (w) {
                                            if (w[1].isWithOut === true) {
                                                ret.properties.without = w[1].propertylist;
                                            } else {
                                                ret.properties.with= w[1].propertylist;
                                            }
                                        }

                                        if (ge) {
                                        ret.globalExpand = true;
                                        }

                                        ret.aggregates = a ? a[1] : null;
                                        ret.parameters = p ? p[1] : null;
                                        ret.concurrencytoken = ct ? ct[1] : null;
                                        ret.retainOrder = rt ? rt[1] : null;
                                        ret.modifications = m || null;


                                        if (n) {
                                            ret.navigates = n[1];
                                        } else {
                                            ret.navigates = null;
                                        }

                                        return ret;
                                   },
        peg$c24 = "expand via global temporary table",
        peg$c25 = { type: "literal", value: "expand via global temporary table", description: "\"expand via global temporary table\"" },
        peg$c26 = "concurrencytoken",
        peg$c27 = { type: "literal", value: "concurrencytoken", description: "\"concurrencytoken\"" },
        peg$c28 = function(k) {
                                        var ret =  { value : true };
                                        if ( k) {
                                            ret.list = k[1];
                                        }
                                        return ret;
                                    },
        peg$c29 = "retain",
        peg$c30 = { type: "literal", value: "retain", description: "\"retain\"" },
        peg$c31 = "order",
        peg$c32 = { type: "literal", value: "order", description: "\"order\"" },
        peg$c33 = function() {
                                        return true;
                                    },
        peg$c34 = "entity",
        peg$c35 = { type: "literal", value: "entity", description: "\"entity\"" },
        peg$c36 = ".",
        peg$c37 = { type: "literal", value: ".", description: "\".\"" },
        peg$c38 = function(e, s, r) {
                                        return {
                                            'isExplicitEntity' : (e ? true : false),
                                            'name' : r,
                                            'schema' : (s ? s[0] : null)
                                        }
                                    },
        peg$c39 = "/",
        peg$c40 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c41 = "as",
        peg$c42 = { type: "literal", value: "as", description: "\"as\"" },
        peg$c43 = function(e) { return e;},
        peg$c44 = "without",
        peg$c45 = { type: "literal", value: "without", description: "\"without\"" },
        peg$c46 = "with",
        peg$c47 = { type: "literal", value: "with", description: "\"with\"" },
        peg$c48 = function(w, p) {
                                        var ret = { propertylist : p };
                                        if (w === 'without') {
                                            ret.isWithOut = true;
                                        }
                                        return ret;
                                    },
        peg$c49 = "(",
        peg$c50 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c51 = ")",
        peg$c52 = { type: "literal", value: ")", description: "\")\"" },
        peg$c53 = function(c) {
                                   return c;
                                   },
        peg$c54 = ",",
        peg$c55 = { type: "literal", value: ",", description: "\",\"" },
        peg$c56 = function(c, cl) {
                                        var ret = [c];
                                        for (var i = 0; i < cl.length; i++) {
                                          ret.push(cl[i][2+1]);
                                        }
                                        return ret;
                                   },
        peg$c57 = function(q) { return q;},
        peg$c58 = "keys",
        peg$c59 = { type: "literal", value: "keys", description: "\"keys\"" },
        peg$c60 = "key",
        peg$c61 = { type: "literal", value: "key", description: "\"key\"" },
        peg$c62 = function(k) {
                                        return k[1];
                                   },
        peg$c63 = "generate",
        peg$c64 = { type: "literal", value: "generate", description: "\"generate\"" },
        peg$c65 = function(k) {
                                        var ret= {
                                            isGenerated : true,
                                        }
                                        if ( k) {
                                           ret.local = k[1];
                                        }
                                        return ret;
                                   },
        peg$c66 = "local",
        peg$c67 = { type: "literal", value: "local", description: "\"local\"" },
        peg$c68 = function(c) {
                                        return c;
                                    },
        peg$c69 = "navigates",
        peg$c70 = { type: "literal", value: "navigates", description: "\"navigates\"" },
        peg$c71 = function(n) { return n; },
        peg$c72 = function(n, nl) {
                                        var ret = {};
                                        ret[n.name] = n;
                                        for (var i = 0; i < nl.length; i++) {
                                          ret[nl[i][2].name]= nl[i][2];
                                        }
                                        return ret;
                                   },
        peg$c73 = function(a, n, f) {
                                        var ret =  {
                                            "name" : n,
                                            "association" : a,
                                        }

                                        if (f) {
                                            ret.from = {};
                                            if (f[1] === 'principal') {
                                                ret.from.principal = true;
                                            } else {
                                                ret.from.dependent = true;
                                            }
                                        }
                                        return ret;
                                   },
        peg$c74 = "from",
        peg$c75 = { type: "literal", value: "from", description: "\"from\"" },
        peg$c76 = "principal",
        peg$c77 = { type: "literal", value: "principal", description: "\"principal\"" },
        peg$c78 = "dependent",
        peg$c79 = { type: "literal", value: "dependent", description: "\"dependent\"" },
        peg$c80 = function(pd) {
                                        return pd;
                                    },
        peg$c81 = "aggregates",
        peg$c82 = { type: "literal", value: "aggregates", description: "\"aggregates\"" },
        peg$c83 = "always",
        peg$c84 = { type: "literal", value: "always", description: "\"always\"" },
        peg$c85 = function(a) {
                                      if (a) {
                                          return a[1];
                                      }
                                      return {};
                                   },
        peg$c86 = function(a) {
                                        return a;
                                    },
        peg$c87 = function(a, al) {
                                        var ret = [a];
                                        for (var i = 0; i < al.length; i++) {
                                            ret.push(al[i][2]);
                                        }
                                        return ret;
                                   },
        peg$c88 = "of",
        peg$c89 = { type: "literal", value: "of", description: "\"of\"" },
        peg$c90 = function(a, c) {
                                       return { "function" : a, "column" : c };
                                   },
        peg$c91 = "SUM",
        peg$c92 = { type: "literal", value: "SUM", description: "\"SUM\"" },
        peg$c93 = "AVG",
        peg$c94 = { type: "literal", value: "AVG", description: "\"AVG\"" },
        peg$c95 = "MIN",
        peg$c96 = { type: "literal", value: "MIN", description: "\"MIN\"" },
        peg$c97 = "MAX",
        peg$c98 = { type: "literal", value: "MAX", description: "\"MAX\"" },
        peg$c99 = "parameters",
        peg$c100 = { type: "literal", value: "parameters", description: "\"parameters\"" },
        peg$c101 = "via",
        peg$c102 = { type: "literal", value: "via", description: "\"via\"" },
        peg$c103 = function(pk, pe, pp) {
                                        var ret = {};
                                        if ( pk ) {
                                            ret.viaKey = true;
                                        }
                                        if ( pe ) {
                                            ret.entity = pe[1];
                                        }
                                        if ( pp ) {
                                            ret.resultProperty = pp[1];
                                        }
                                        return ret;
                                    },
        peg$c104 = "and",
        peg$c105 = { type: "literal", value: "and", description: "\"and\"" },
        peg$c106 = "results",
        peg$c107 = { type: "literal", value: "results", description: "\"results\"" },
        peg$c108 = "property",
        peg$c109 = { type: "literal", value: "property", description: "\"property\"" },
        peg$c110 = function(q) {
                                        return q;
                                    },
        peg$c111 = function(aMs) {
                                        var ret = { };
                                        for (var i = 0; i < aMs.length; i++) {
                                            if (aMs[i].create) {
                                                ret.create = aMs[i].create;
                                            }
                                            if (aMs[i].update) {
                                                ret.update = aMs[i].update;
                                            }
                                            if (aMs[i].delete) {
                                                ret.delete = aMs[i].delete;
                                            }
                                        }
                                        return ret;
                                    },
        peg$c112 = function(cud) {
                                        return cud;
                                   },
        peg$c113 = "create",
        peg$c114 = { type: "literal", value: "create", description: "\"create\"" },
        peg$c115 = function(m) { return { "create" : m }; },
        peg$c116 = "update",
        peg$c117 = { type: "literal", value: "update", description: "\"update\"" },
        peg$c118 = function(m) { return { "update" : m }; },
        peg$c119 = "delete",
        peg$c120 = { type: "literal", value: "delete", description: "\"delete\"" },
        peg$c121 = function(m) { return { "delete" : m }; },
        peg$c122 = "metadata",
        peg$c123 = { type: "literal", value: "metadata", description: "\"metadata\"" },
        peg$c124 = function(m) { return { "metadata" : m }; },
        peg$c125 = "forbidden",
        peg$c126 = { type: "literal", value: "forbidden", description: "\"forbidden\"" },
        peg$c127 = function(a) {
                                        return a;
                                   },
        peg$c128 = function(a, em) {
                                       var ret = {};
                                       ret.using = a;
                                       if (em) {
                                            ret.events = em[1].events;
                                       }

                                       return ret;
                                   },
        peg$c129 = "using",
        peg$c130 = { type: "literal", value: "using", description: "\"using\"" },
        peg$c131 = function(a) { return a; },
        peg$c132 = "events",
        peg$c133 = { type: "literal", value: "events", description: "\"events\"" },
        peg$c134 = function(e) { return { events: e}; },
        peg$c135 = function(e, el) {
                                        var ret = [e];
                                        for (var i = 0; i < el.length; i++) {
                                          ret.push(el[i][2]);
                                        }
                                        return ret;
                                   },
        peg$c136 = function(e, a) {
                                    return { type: e, action:a };
                                   },
        peg$c137 = "before",
        peg$c138 = { type: "literal", value: "before", description: "\"before\"" },
        peg$c139 = "after",
        peg$c140 = { type: "literal", value: "after", description: "\"after\"" },
        peg$c141 = "precommit",
        peg$c142 = { type: "literal", value: "precommit", description: "\"precommit\"" },
        peg$c143 = "postcommit",
        peg$c144 = { type: "literal", value: "postcommit", description: "\"postcommit\"" },
        peg$c145 = function(a, c, p, d, as, m) {
                                       var ret = {
                                            "isAssociation" : true,
                                            "name" : a.name,
                                            "principal" : p,
                                            "dependent" : d,
                                            "referentialConstraint" : ( c ? true : false ),
                                            "over" : null,
                                       }
                                       if ( a.viaParameters) {
                                          ret.viaParameters =  a.viaParameters;
                                       }
                                       if (as) {
                                            if (as[1].over) {
                                                ret.over = as[1].over;
                                            }
                                            if (as[1].storage) {
                                                ret.storage = as[1].storage;
                                            }
                                       }

                                       ret.modification = m || null;
                                       return ret;
                                   },
        peg$c146 = "with referential constraint",
        peg$c147 = { type: "literal", value: "with referential constraint", description: "\"with referential constraint\"" },
        peg$c148 = "association",
        peg$c149 = { type: "literal", value: "association", description: "\"association\"" },
        peg$c150 = "via parameters",
        peg$c151 = { type: "literal", value: "via parameters", description: "\"via parameters\"" },
        peg$c152 = function(p, a) {
                                    var ret = { name : a };
                                    if (p) {
                                        ret.viaParameters = true;
                                    }
                                    return ret;
                                   },
        peg$c153 = function(e) { return e; },
        peg$c154 = function(e, m) {
                                       var ret = {
                                           "type": e.type,
                                           "joinproperties" :e.joinproperties,
                                           "multiplicity" : m,

                                       };
                                       return ret;
                                   },
        peg$c155 = function(et, jp) { return { "type" : et, "joinproperties" : jp ? jp[1]: null };},
        peg$c156 = function(jp) { return jp; },
        peg$c157 = function(c) { return c; },
        peg$c158 = "multiplicity",
        peg$c159 = { type: "literal", value: "multiplicity", description: "\"multiplicity\"" },
        peg$c160 = function(m) { return m; },
        peg$c161 = "1",
        peg$c162 = { type: "literal", value: "1", description: "\"1\"" },
        peg$c163 = "0..1",
        peg$c164 = { type: "literal", value: "0..1", description: "\"0..1\"" },
        peg$c165 = "1..*",
        peg$c166 = { type: "literal", value: "1..*", description: "\"1..*\"" },
        peg$c167 = "*",
        peg$c168 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c169 = "over",
        peg$c170 = { type: "literal", value: "over", description: "\"over\"" },
        peg$c171 = function(r, p, d) {
                                        var over = {
                                            "object" : r,
                                            "principal" : p,
                                            "dependent" : d
                                        };
                                        return { "over" : over };
                                   },
        peg$c172 = function(oe) { return oe; },
        peg$c173 = function(p) { return p; },
        peg$c174 = function(s) {
                                        return { storage :s };
                                    },
        peg$c175 = "no",
        peg$c176 = { type: "literal", value: "no", description: "\"no\"" },
        peg$c177 = "storage",
        peg$c178 = { type: "literal", value: "storage", description: "\"storage\"" },
        peg$c179 = function() {
                                        return "none"
                                    },
        peg$c180 = "on",
        peg$c181 = { type: "literal", value: "on", description: "\"on\"" },
        peg$c182 = "annotations",
        peg$c183 = { type: "literal", value: "annotations", description: "\"annotations\"" },
        peg$c184 = function(al) {
                                        var ret = {};
                                        var item;
                                        for (var i = 0; i < al.length; i++) {
                                            item = al[i][1];
                                            ret[item.name] = item.value;
                                        }
                                        return ret;
                                    },
        peg$c185 = "enable",
        peg$c186 = { type: "literal", value: "enable", description: "\"enable\"" },
        peg$c187 = function(s) { return { name : "enable", value : s }; },
        peg$c188 = "settings",
        peg$c189 = { type: "literal", value: "settings", description: "\"settings\"" },
        peg$c190 = function(s) { return s; },
        peg$c191 = function(sl) {
                                        var ret = {};
                                        var item;
                                        for (var i = 0; i < sl.length; i++) {
                                            item = sl[i][1];
                                            ret[item.name] = item.value;
                                        }
                                        return ret;
                                    },
        peg$c192 = "cache.control",
        peg$c193 = { type: "literal", value: "cache.control", description: "\"cache.control\"" },
        peg$c194 = "cache-control",
        peg$c195 = { type: "literal", value: "cache-control", description: "\"cache-control\"" },
        peg$c196 = function(qs) { return {
                                            "name" : "metadata",
                                            "value" : {
                                                "cache-control" : qs
                                            }
                                        };
                                    },
        peg$c197 = "content",
        peg$c198 = { type: "literal", value: "content", description: "\"content\"" },
        peg$c199 = function(qs) { return {
                                            "name" : "content",
                                            "value" : {
                                                "cache-control" : qs
                                            }
                                        };
                                    },
        peg$c200 = function() { return { name : "enable", value : s }; },
        peg$c201 = "support",
        peg$c202 = { type: "literal", value: "support", description: "\"support\"" },
        peg$c203 = function(s) { return { name : "support", value : s }; },
        peg$c204 = function(n) { return n.join(''); },
        peg$c205 = function(a) { return a.join(''); },
        peg$c206 = void 0,
        peg$c207 = { type: "any", description: "any character" },
        peg$c208 = function(char) {return char},
        peg$c209 = /^[\t\x0B\f \xA0\uFEFF]/,
        peg$c210 = { type: "class", value: "[\\t\\x0B\\f \\xA0\\uFEFF]", description: "[\\t\\x0B\\f \\xA0\\uFEFF]" },
        peg$c211 = /^[\n\r]/,
        peg$c212 = { type: "class", value: "[\\n\\r]", description: "[\\n\\r]" },
        peg$c213 = "\"",
        peg$c214 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c215 = "/*",
        peg$c216 = { type: "literal", value: "/*", description: "\"/*\"" },
        peg$c217 = "*/",
        peg$c218 = { type: "literal", value: "*/", description: "\"*/\"" },
        peg$c219 = "//",
        peg$c220 = { type: "literal", value: "//", description: "\"//\"" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseOWS();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedefinition();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOWS();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEOF();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c1(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedefinition() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseservice();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseOWS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseannotations();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseOWS();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesettings();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c3(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseservice() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c4) {
        s1 = peg$c4;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseMWS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenamespace();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOWS();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseservicebody();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c6(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenamespace() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c7) {
        s1 = peg$c7;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequotedstring();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c9(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseservicebody() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c10;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseentrylist();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseMWS();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemetadata();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseOWS();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 59) {
                  s7 = peg$c12;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c13); }
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOWS();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c14;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c15); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c16(s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseentrylist() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseOWS();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseentry();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseOWS();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s6 = peg$c12;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c13); }
            }
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseOWS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseentry();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseOWS();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s6 = peg$c12;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c13); }
              }
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c18(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsemetadata_exit() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 14) === peg$c19) {
        s1 = peg$c19;
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequotedstring();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOWS();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c21(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseentry() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseassociation();
      if (s1 === peg$FAILED) {
        s1 = peg$parseentity();
        if (s1 === peg$FAILED) {
          s1 = peg$parsemetadata_exit();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c22(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseentity() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = peg$parseobject();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseMWS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseentityset();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseMWS();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsewith();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseMWS();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsekeys();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseMWS();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseconcurrencytoken();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseMWS();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseretain_order();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c2;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parseMWS();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsenavigates();
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    s9 = peg$parseMWS();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseglobalExpand();
                      if (s10 !== peg$FAILED) {
                        s9 = [s9, s10];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$c0;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c0;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$c2;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parseMWS();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseaggregates();
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$c0;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$c0;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$c2;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$currPos;
                        s11 = peg$parseMWS();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parseparameters();
                          if (s12 !== peg$FAILED) {
                            s11 = [s11, s12];
                            s10 = s11;
                          } else {
                            peg$currPos = s10;
                            s10 = peg$c0;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$c0;
                        }
                        if (s10 === peg$FAILED) {
                          s10 = peg$c2;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsemodifications();
                          if (s11 === peg$FAILED) {
                            s11 = peg$c2;
                          }
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c23(s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseglobalExpand() {
      var s0;

      if (input.substr(peg$currPos, 33) === peg$c24) {
        s0 = peg$c24;
        peg$currPos += 33;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }

      return s0;
    }

    function peg$parseconcurrencytoken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 16) === peg$c26) {
        s1 = peg$c26;
        peg$currPos += 16;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseMWS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsepropertylist();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c28(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseretain_order() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c29) {
        s1 = peg$c29;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c31) {
            s3 = peg$c31;
            peg$currPos += 5;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c33();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseobject() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c34) {
        s2 = peg$c34;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c35); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMWS();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsequotedstring();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s4 = peg$c36;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c37); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parserepoobject_catalogobject_name();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c38(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserepoobject_catalogobject_name() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsequotedstring();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c9(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parserepoobject() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsequote();
      if (s1 !== peg$FAILED) {
        s2 = peg$parserepopackage();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s3 = peg$c39;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c40); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsereponame_repoextension();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsequote();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsereponame_repoextension() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsenoquotenoslash();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsenoquotenoslash();
      }

      return s0;
    }

    function peg$parserepopackage() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsenoquotenoslash();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsenoquotenoslash();
      }

      return s0;
    }

    function peg$parsereponame() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsenoquotenoslash();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsenoquotenoslash();
      }

      return s0;
    }

    function peg$parserepoextension() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsenoquotenoslash();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsenoquotenoslash();
      }

      return s0;
    }

    function peg$parsecatalogobject() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsequotedstring();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c36;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequotedstring();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseentityset() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c41) {
        s1 = peg$c41;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequotedstring();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c43(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewith() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c44) {
        s1 = peg$c44;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c45); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c46) {
          s1 = peg$c46;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepropertylist();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c48(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepropertylist() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c49;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecolumnlist();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOWS();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c51;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c52); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c53(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecolumnlist() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsecolumnname();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseOWS();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c54;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c55); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseOWS();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecolumnname();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseOWS();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c54;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c55); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseOWS();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecolumnname();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c56(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecolumnname() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsequotedstring();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c57(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsekeys() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c58) {
        s1 = peg$c58;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c59); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c60) {
          s1 = peg$c60;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseOWS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsepropertylist();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseMWS();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsekeygenerated();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c62(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsekeygenerated() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c63) {
        s1 = peg$c63;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseMWS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsekeygenlocal();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c65(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsekeygenlocal() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c66) {
        s1 = peg$c66;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecolumnname();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c68(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenavigates() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c69) {
        s1 = peg$c69;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOWS();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c49;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c50); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOWS();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenavlist();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c51;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c52); }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c71(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenavlist() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsenaventry();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOWS();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c54;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c55); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseOWS();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsenaventry();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseOWS();
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c54;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c55); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseOWS();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsenaventry();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseOWS();
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c72(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenaventry() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseassocname();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c41) {
            s3 = peg$c41;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMWS();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenavpropname();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseMWS();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsefromend();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c2;
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c73(s1, s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseassocname() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsequotedstring();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c57(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenavpropname() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsequotedstring();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c57(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefromend() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c74) {
        s1 = peg$c74;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c76) {
            s3 = peg$c76;
            peg$currPos += 9;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c77); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 9) === peg$c78) {
              s3 = peg$c78;
              peg$currPos += 9;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c79); }
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c80(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseaggregates() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c81) {
        s1 = peg$c81;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c82); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c83) {
            s3 = peg$c83;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c84); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseOWS();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseaggregatestuple();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c85(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseaggregatestuple() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c49;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaggregateslist();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOWS();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c51;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c52); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c86(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseaggregateslist() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseaggregate();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOWS();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c54;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c55); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseOWS();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseaggregate();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c54;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c55); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseOWS();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseaggregate();
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c87(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseaggregate() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseaggregatefunction();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c88) {
            s3 = peg$c88;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c89); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMWS();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecolumnname();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c90(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseaggregatefunction() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c91) {
        s0 = peg$c91;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c93) {
          s0 = peg$c93;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c94); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c95) {
            s0 = peg$c95;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c96); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c97) {
              s0 = peg$c97;
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c98); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseparameters() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c99) {
        s1 = peg$c99;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c100); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c101) {
            s3 = peg$c101;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c102); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseMWS();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseparameterskeyand();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseMWS();
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c34) {
                  s6 = peg$c34;
                  peg$currPos += 6;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c35); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parseMWS();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseparameterentitysetname();
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    s9 = peg$parseMWS();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseparametersresultsprop();
                      if (s10 !== peg$FAILED) {
                        s9 = [s9, s10];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$c0;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c0;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$c2;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c103(s4, s7, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseparameterskeyand() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c60) {
        s1 = peg$c60;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c104) {
            s3 = peg$c104;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c105); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseparameterentitysetname() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsequotedstring();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c57(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseparametersresultsprop() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c106) {
        s1 = peg$c106;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c107); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c108) {
            s3 = peg$c108;
            peg$currPos += 8;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c109); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMWS();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsequotedstring();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c110(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsemodifications() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsemodificationSpecs();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsemodificationSpecs();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c111(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsemodificationSpecs() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseOWS();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecreate();
        if (s2 === peg$FAILED) {
          s2 = peg$parseupdate();
          if (s2 === peg$FAILED) {
            s2 = peg$parsedelete();
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c112(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecreate() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c113) {
        s1 = peg$c113;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemodificationspec();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c115(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseupdate() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c116) {
        s1 = peg$c116;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c117); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemodificationspec();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c118(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedelete() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c119) {
        s1 = peg$c119;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c120); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemodificationspec();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c121(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsemetadata() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c122) {
        s1 = peg$c122;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemodificationspec();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c124(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsemodificationspec() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsemodificationactionevents();
      if (s1 === peg$FAILED) {
        s1 = peg$parseevents();
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c125) {
            s1 = peg$c125;
            peg$currPos += 9;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c126); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c127(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsemodificationactionevents() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsemodificationaction();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseMWS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseevents();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c128(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsemodificationaction() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c129) {
        s1 = peg$c129;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c130); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaction();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c131(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseaction() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsequotedstring();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c9(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseevents() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c132) {
        s1 = peg$c132;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c133); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOWS();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c49;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c50); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOWS();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseeventlist();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseOWS();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c51;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c52); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c134(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseeventlist() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseeventtypeaction();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOWS();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c54;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c55); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseOWS();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseeventtypeaction();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c54;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c55); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseOWS();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseeventtypeaction();
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c135(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseeventtypeaction() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseeventtype();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaction();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c136(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseeventtype() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c137) {
        s0 = peg$c137;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c138); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c139) {
          s0 = peg$c139;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c140); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c141) {
            s0 = peg$c141;
            peg$currPos += 9;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c142); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c143) {
              s0 = peg$c143;
              peg$currPos += 10;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c144); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseassociation() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseassociationdef();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseMWS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseassociationrefcontraint();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseMWS();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseprincipalend();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseMWS();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsedependentend();
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parseMWS();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseassoctable();
                    if (s9 === peg$FAILED) {
                      s9 = peg$parsestorage();
                    }
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c0;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsemodifications();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c2;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c145(s1, s2, s4, s6, s7, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseassociationrefcontraint() {
      var s0;

      if (input.substr(peg$currPos, 27) === peg$c146) {
        s0 = peg$c146;
        peg$currPos += 27;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c147); }
      }

      return s0;
    }

    function peg$parseassociationdef() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c148) {
        s1 = peg$c148;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c149); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseMWS();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 14) === peg$c150) {
            s4 = peg$c150;
            peg$currPos += 14;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c151); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseMWS();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseassocname();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c152(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseprincipalend() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c76) {
        s1 = peg$c76;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c153(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedependentend() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c78) {
        s1 = peg$c78;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c153(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseend() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseendref();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemultiplicity();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c154(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseendref() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseendtype();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseOWS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsejoinpropertieslist();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c155(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseendtype() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsequotedstring();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c153(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsejoinpropertieslist() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c49;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsejoinproperties();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOWS();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c51;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c52); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c156(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsejoinproperties() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsecolumnlist();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c157(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsemultiplicity() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c158) {
        s1 = peg$c158;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c159); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequote();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsemultiplicityvalue();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsequote();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c160(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsemultiplicityvalue() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 49) {
        s0 = peg$c161;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c162); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c163) {
          s0 = peg$c163;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c164); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c165) {
            s0 = peg$c165;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c166); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 42) {
              s0 = peg$c167;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c168); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseassoctable() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c169) {
        s1 = peg$c169;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c170); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserepoobject_catalogobject_name();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMWS();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseoverprincipalend();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseMWS();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseoverdependentend();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c171(s3, s5, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseoverprincipalend() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c76) {
        s1 = peg$c76;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseoverend();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c172(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseoverdependentend() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c78) {
        s1 = peg$c78;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseoverend();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c172(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseoverend() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsepropertylist();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c173(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestorage() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsenostorage();
      if (s1 === peg$FAILED) {
        s1 = peg$parsestorageend();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c174(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenostorage() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c175) {
        s1 = peg$c175;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c176); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c177) {
            s3 = peg$c177;
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c178); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c179();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestorageend() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c177) {
        s1 = peg$c177;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c178); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c180) {
            s3 = peg$c180;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c181); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMWS();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c76) {
                s5 = peg$c76;
                peg$currPos += 9;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c77); }
              }
              if (s5 === peg$FAILED) {
                if (input.substr(peg$currPos, 9) === peg$c78) {
                  s5 = peg$c78;
                  peg$currPos += 9;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c79); }
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c80(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseannotations() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c182) {
        s1 = peg$c182;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c183); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseannotationsbody();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c131(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseannotationsbody() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c10;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseannotationscontent();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOWS();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s4 = peg$c14;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c131(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseannotationscontent() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseOWS();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseannotationconfig();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseOWS();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s6 = peg$c12;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c13); }
            }
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseOWS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseannotationconfig();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseOWS();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s6 = peg$c12;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c13); }
              }
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c184(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseannotationconfig() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseannotation_enable();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c131(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseannotation_enable() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c185) {
        s1 = peg$c185;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c186); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c187(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesettings() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c188) {
        s1 = peg$c188;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c189); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesettingsbody();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c190(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesettingsbody() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c10;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesettingscontent();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseOWS();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s4 = peg$c14;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c190(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesettingscontent() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseOWS();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsesettingsconfig();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseOWS();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s6 = peg$c12;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c13); }
            }
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseOWS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsesettingsconfig();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseOWS();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s6 = peg$c12;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c13); }
              }
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c191(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesettingsconfig() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsesettings_meta_cache();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesettings_content();
        if (s1 === peg$FAILED) {
          s1 = peg$parsesettings_enable();
          if (s1 === peg$FAILED) {
            s1 = peg$parsesettings_support();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c190(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesettings_meta_cache() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c122) {
        s1 = peg$c122;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 13) === peg$c192) {
            s3 = peg$c192;
            peg$currPos += 13;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c193); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 13) === peg$c194) {
              s3 = peg$c194;
              peg$currPos += 13;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c195); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMWS();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsequotedstring();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c196(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesettings_content() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c197) {
        s1 = peg$c197;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c198); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 13) === peg$c192) {
            s3 = peg$c192;
            peg$currPos += 13;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c193); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 13) === peg$c194) {
              s3 = peg$c194;
              peg$currPos += 13;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c195); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMWS();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsequotedstring();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c199(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesettings_enable() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c185) {
        s1 = peg$c185;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c186); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c200();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesettings_support() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c201) {
        s1 = peg$c201;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c202); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c203(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequotedstring() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsequote();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsenotquote();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsenotquote();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsequote();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c204(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseapha_num();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseapha_num();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c205(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseapha_num() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parsesep();
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s2 = peg$c12;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c206;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c207); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c208(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseOWS() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsesep();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsesep();
      }

      return s0;
    }

    function peg$parseMWS() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsesep();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsesep();
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenotquote() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parsequote();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c206;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseanyCharacter();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c131(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenoquotenoslash() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parsequote();
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s2 = peg$c39;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c40); }
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c206;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseanyCharacter();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesep() {
      var s0;

      s0 = peg$parsewhiteSpace();
      if (s0 === peg$FAILED) {
        s0 = peg$parselineTerminator();
        if (s0 === peg$FAILED) {
          s0 = peg$parseenclosedComment();
          if (s0 === peg$FAILED) {
            s0 = peg$parselineComment();
          }
        }
      }

      return s0;
    }

    function peg$parsewhiteSpace() {
      var s0;

      if (peg$c209.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c210); }
      }

      return s0;
    }

    function peg$parselineTerminator() {
      var s0;

      if (peg$c211.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c212); }
      }

      return s0;
    }

    function peg$parsequote() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c213;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c214); }
      }

      return s0;
    }

    function peg$parseenclosedComment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c215) {
        s1 = peg$c215;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c216); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c217) {
          s5 = peg$c217;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c218); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c206;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseanyCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c217) {
            s5 = peg$c217;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c218); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c206;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseanyCharacter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c217) {
            s3 = peg$c217;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c218); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselineComment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c219) {
        s1 = peg$c219;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c220); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parselineTerminator();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c206;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseanyCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parselineTerminator();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c206;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseanyCharacter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseanyCharacter() {
      var s0;

      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c207); }
      }

      return s0;
    }

    function peg$parseEOF() {
      var s0, s1;

      s0 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c207); }
      }
      peg$silentFails--;
      if (s1 === peg$FAILED) {
        s0 = peg$c206;
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }


        var utils = require('./../utils/utils');


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
